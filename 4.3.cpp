#include <iostream>
#include <cstdlib>
#include <ctime>
using namespace std;

// Класс для представления многомерного массива
class Array {
    private:
        int n; // Количество строк
        int m; // Количество столбцов
        int** data; // Указатель на двумерный динамический массив
    public:
        // Конструктор с параметрами n и m
        Array(int n, int m) {
            this->n = n;
            this->m = m;
            // Выделение памяти для массива
            data = new int*[n];
            for (int i = 0; i < n; i++) {
                data[i] = new int[m];
            }
        }

        // Деструктор для освобождения памяти
        ~Array() {
            for (int i = 0; i < n; i++) {
                delete[] data[i];
            }
            delete[] data;
        }

        // Метод для заполнения массива случайными числами
        void fillRandom() {
            // Инициализация генератора случайных чисел
            srand(time(NULL));
            // Заполнение массива случайными числами от 0 до 99
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    data[i][j] = rand() % 100;
                }
            }
        }

        // Метод для заполнения массива с клавиатуры
        void fillKeyboard() {
            // Ввод элементов массива с клавиатуры
            cout << "Введите элементы массива:" << endl;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    cin >> data[i][j];
                }
            }
        }

        // Метод для вывода массива на экран
        void print() {
            // Вывод элементов массива на экран
            cout << "Массив:" << endl;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    cout << data[i][j] << " ";
                }
                cout << endl;
            }
        }

        // Метод для замены максимального элемента каждой строки номером столбца, в котором он находится
        void replaceMax() {
            // Проход по всем строкам массива
            for (int i = 0; i < n; i++) {
                // Поиск максимального элемента и его индекса в текущей строке
                int max = data[i][0];
                int maxIndex = 0;
                for (int j = 1; j < m; j++) {
                    if (data[i][j] > max) {
                        max = data[i][j];
                        maxIndex = j;
                    }
                }
                // Замена максимального элемента номером столбца
                data[i][maxIndex] = maxIndex;
            }
        }

        // Метод для вставки после всех строк, содержащих минимальный элемент массива, строки 2, 4, 6, ...
        void insertRow() {
            // Поиск минимального элемента во всем массиве
            int min = data[0][0];
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    if (data[i][j] < min) {
                        min = data[i][j];
                    }
                }
            }
            // Подсчет количества строк, содержащих минимальный элемент
            int count = 0;
            for (int i = 0; i < n; i++) {
                bool found = false;
                for (int j = 0; j < m; j++) {
                    if (data[i][j] == min) {
                        found = true;
                        break;
                    }
                }
                if (found) {
                    count++;
                }
            }
            // Создание нового массива с увеличенным количеством строк
            int newN = n + count;
            int** newData = new int*[newN];
            for (int i = 0; i < newN; i++) {
                newData[i] = new int[m];
            }
            // Копирование элементов из старого массива в новый, вставляя после каждой строки с минимальным элементом строку 2, 4, 6, ...
            int k = 0; // Индекс для нового массива
            for (int i = 0; i < n; i++) {// Копирование текущей строки из старого массива в новый
                for (int j = 0; j < m; j++) {
                    newData[k][j] = data[i][j];
                }
                k++;
                // Проверка, содержит ли текущая строка минимальный элемент
                bool found = false;
                for (int j = 0; j < m; j++) {
                    if (data[i][j] == min) {
                        found = true;
                        break;
                    }
                }
                // Если содержит, то вставляем после нее строку 2, 4, 6, ...
                if (found) {
                    for (int j = 0; j < m; j++) {
                        newData[k][j] = 2 * (j + 1);
                    }
                    k++;
                }
            }
            // Освобождение памяти из старого массива
            for (int i = 0; i < n; i++) {
                delete[] data[i];
            }
            delete[] data;
            // Присваивание нового массива в качестве данных для объекта
            data = newData;
            n = newN;
        }
};

// Главная функция программы
int main() {
    // Ввод размеров массива с клавиатуры
    int n, m;
    cout << "Введите количество строк и столбцов массива:" << endl;
    cin >> n >> m;
    // Создание объекта класса Array с заданными размерами
    Array array(n, m);
    // Ввод способа заполнения массива с клавиатуры
    char choice;
    cout << "Выберите способ заполнения массива: (r - случайные числа, k - клавиатура)" << endl;
    cin >> choice;
    // Вызов соответствующего метода для заполнения массива
    if (choice == 'r') {
        array.fillRandom();
    }
    else if (choice == 'k') {
        array.fillKeyboard();
    }
    else {
        cout << "Неверный выбор" << endl;
        return 0;
    }
    // Вывод исходного массива на экран
    array.print();
    // Вызов метода для замены максимального элемента каждой строки номером столбца, в котором он находится
    array.replaceMax();
    // Вывод измененного массива на экран
    cout << "Массив после замены максимальных элементов:" << endl;
    array.print();
    // Вызов метода для вставки после всех строк, содержащих минимальный элемент массива, строки 2, 4, 6, ...
    array.insertRow();
    // Вывод измененного массива на экран
    cout << "Массив после вставки строк:" << endl;
    array.print();
    return 0;
}
